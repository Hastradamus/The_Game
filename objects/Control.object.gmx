<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>BadSprite</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = -1;
global.debug = true;
goRight=true;
//hitTimer1=-1
//hitTimer2=-1
shotgunTimer=-1;
//killz: variable dictating the point at which the room should be reset
killz = 3000;
window_set_cursor(cr_none);
paused = false;
readableDelta=0;//for reading delta
readTime=0;
screen_dim = noone;
pauseControl=false;
drawPaused = false;
songHeld=0;
mute=global.mute
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(!control.mute&amp;&amp;!paused){
    if(global.musicSelector == 0){
        if(!audio_is_playing(Music)){
            audio_stop_sound(bossMusic1);
            audio_stop_sound(octopus_sound);
            audio_play_sound(Music,1,true);
        }
    }
    else if(global.musicSelector == 1){
        if(!audio_is_playing(bossMusic1)){
            audio_stop_sound(Music);
            audio_stop_sound(octopus_sound);
            audio_play_sound(bossMusic1,1,true);    
        }
    }
    else if(global.musicSelector == 2){
        if(!audio_is_playing(octopus_sound)){
            audio_stop_sound(Music);
            audio_play_sound(octopus_sound,1,1);
        }
    }
}*/

if(!control.mute&amp;&amp;!paused){
    if(global.musicSelector == 0){
        if(!audio_is_playing(Music)){
            audio_stop_all()
            audio_play_sound(Music,5,true);
        }
    }
    else if(global.musicSelector == 1){
        if(!audio_is_playing(bossMusic1)){
            audio_stop_all()
            audio_play_sound(bossMusic1,5,true);    
        }
    }
    else if(global.musicSelector == 2){
        if(!audio_is_playing(octopus_sound)){
            audio_stop_all();
            audio_play_sound(octopus_sound,5,1);
        }
    }
    else if(global.musicSelector == 3){
        if(!audio_is_playing(bossMusic2)){
            audio_stop_all()
            audio_play_sound(bossMusic2,5,1)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(paused)
    draw_sprite_tiled(screen_dim_s, 0, 0, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(pauseControl){
    if(paused){
        //everything in this bblock is executed when the game is already paused, then
        //paused is pressed again
        
        //TODO: add pause menu overlay buttons and logic into its own script
        /*
        with MenuButton instance_destroy();
        with Cursor instance_destroy();
        */
        pauseMenuTearDown_script();
        drawPaused = false;
        paused=false;
        audio_stop_sound(pauseMusic);
        if(!control.mute){//resume music
            if(songHeld==0)audio_resume_sound(Music);
            else if(songHeld==1)audio_resume_sound(bossMusic1);
            else if(songHeld==2)audio_resume_sound(octopus_sound);
            else if(songHeld==3)audio_resume_sound(bossMusic2);
        }
        
    }    
    else{
        if(room != start_screen){
            //everything in this block is executed on the pause screen
            
            //TODO: add pause menu overlay buttons and logic into its own script
            /*
            instance_create(Player.x, Player.y, MenuButton);
            instance_create(mouse_x, mouse_y, Cursor);
            */
            pauseMenuSetup_script();
            
            drawPaused = true;
        if(global.musicSelector==0){//pause music
            audio_pause_sound(Music);
            songHeld=0;
        }
        else if(global.musicSelector==1){
            audio_pause_sound(bossMusic1);
            songHeld=1;
        }
        else if(global.musicSelector==2){
            audio_pause_sound(octopus_sound);
            songHeld=2;
        }
        else{
            audio_pause_sound(bossMusic2)
            songHeld=3
        }
        if(!control.mute&amp;&amp;room != juggling_MiniGame)
            audio_play_sound(pauseMusic,3,1);//play pause music
            
        audio_stop_sound(fuse);
        audio_stop_sound(digeridoo);
        paused=true;
        }
    }        
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all()
mute=!mute
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(pauseControl){
    if(paused){
        //everything in this bblock is executed when the game is already paused, then
        //paused is pressed again
        
        //TODO: add pause menu overlay buttons and logic into its own script
        /*
        with MenuButton instance_destroy();
        with Cursor instance_destroy();
        */
        pauseMenuTearDown_script();
        drawPaused = false;
        paused=false;
        audio_stop_sound(pauseMusic);
        if(!control.mute){//resume music
            if(songHeld==0)audio_resume_sound(Music);
            else if(songHeld==1)audio_resume_sound(bossMusic1);
            else if(songHeld==2)audio_resume_sound(octopus_sound);
            else if(songHeld==3)audio_resume_sound(bossMusic2);
        }
        
    }    
    else{
        if(room != start_screen){
            //everything in this block is executed on the pause screen
            
            //TODO: add pause menu overlay buttons and logic into its own script
            /*
            instance_create(Player.x, Player.y, MenuButton);
            instance_create(mouse_x, mouse_y, Cursor);
            */
            pauseMenuSetup_script();
            
            drawPaused = true;
        if(global.musicSelector==0){//pause music
            audio_pause_sound(Music);
            songHeld=0;
        }
        else if(global.musicSelector==1){
            audio_pause_sound(bossMusic1);
            songHeld=1;
        }
        else if(global.musicSelector==2){
            audio_pause_sound(octopus_sound);
            songHeld=2;
        }
        else{
            audio_pause_sound(bossMusic2)
            songHeld=3
        }
        if(!control.mute&amp;&amp;room != juggling_MiniGame)
            audio_play_sound(pauseMusic,3,1);//play pause music
            
        audio_stop_sound(fuse);
        audio_stop_sound(digeridoo);
        paused=true;
        }
    }        
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
