<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_with_jump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initializePlayerValues_script();
var cam = instance_create(0, 0, CameraHandler);
gamepad_set_vibration(0, 0, 0); // make sure controller isn't vibrating on player creation
//respawn on checkpoints
if(global.checkpointR==room){
    x = global.checkpointx;
    y = global.checkpointy;
};
instance_create(0, 0, Crosshair);
paused=false;
saveAssign_script();

heady = noone; //real assignment in player step
pdir = point_direction(x, heady, mouse_x, mouse_y);
//create the Head
head = instance_create(x, heady, Head);
headx = self.x + 15; // for head position
//head.visible = false; // delete later
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shotgunFireable=true;
alarm[3]=-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*shotgunFireable = true;
alarm[2] = -1; //stops this timer from looping;*/

//create casing
/*if(!global.mute)*/
    casing=instance_create(x,y-30,Casing)
    casing.vSpeed=-7+random(3)
    casing.hSpeed=3-random(6)
    casing.image_blend=c_red
    casing.image_xscale=1.4
    casing.image_yscale=1.4

alarm[3]=50*audio_sound_length(shotgunReload_sfx)
alarm[2]=-1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reload sound
if (!control.mute) {
    audio_play_sound(shotgunReload_sfx, 2, 0);
    audio_sound_pitch(shotgunReload_sfx, random_range(1, 1.1));
}
alarm[1] = -1;
//alarm[2] = 60 * audio_sound_length(shotgunReload_sfx); // calls alarm2 when reload audio is finished playing
alarm[2] = 10*audio_sound_length(shotgunReload_sfx)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(0, 0, 0); //sets the controllers vibration to 0
alarm[0] = -1; // turns off alarm 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!control.paused){
    if(!noButtons){
        checkForKeyboardInput_script();
    }
    checkCollisions_script();
    movePlayer_script();
    timerControl_script();
    padListener_script();
    faceMouse_script();
    animationHandling_script();
    
    var yoffset = 10;
    heady = (y + yoffset + head.sprite_height/2) - (sprite_height/2); //for head position
    if(myDirection==0)headx=x+6
        else if (myDirection==1)headx=x-6
        else if (myDirection==2)headx=x+13
        else headx=x-13
    
    if(myDirection&gt;1)heady+=4//so head lowers when running

    pdir = point_direction(headx, heady, mouse_x, mouse_y); // for head rotation

    var scale = sqrt(16*16+13*13)

    if(playerDir==facing.right)
        var offset = arctan2(13,16)
    else
        offset = -arctan2(13,16)

    bulletx = headx + scale*cos(pdir*pi/180 + offset)
    bullety = heady - scale*sin(pdir*pi/180 + offset)
    
    if mouse_check_button_pressed(mb_left){
        univ_shootBullet_script(point_direction(bulletx,bullety,mouse_x,mouse_y),false);
    }
    if mouse_check_button_pressed(mb_right){
        univ_shootShotgun_script(point_direction(bulletx,bullety,mouse_x,mouse_y),false);
    }
}
else image_speed=0;

//check to see if player's y is greater than killz. If so reset the room
if(y &gt; control.killz||hp&lt;=0||instance_place(x,y,Lava)){
    playerDeath_script();
}

/* padPauseHandler_scipt: this function handles
pause functionality for the controller. see
the script for more info */
padPauseHandler_script();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawReticle_script();
draw_sprite(crosshair_s,0,bulletx,bullety)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; hp; i++){
    draw_sprite_ext(heart_s, -1, 20 + 40 * i, 20, 1, 1, 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
